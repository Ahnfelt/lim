Case[t] {
    case(condition : () => Bool, body : () => t) : Case[t]
    else(body : () => t) : t
}

case[t](condition : () => Bool, body : () => t) : Case[t] {
    if(condition(), {
        result := body()
        Case { this =>
            case(a, b) { this }
            else(b) { result }
        }
    }, {
        Case {
            case(condition, body) { case(condition, body) }
            else(body) { body() }
        }
    })
}

if[t](condition : Bool, then : () => t, else : () => t) : t {
    condition ? {
        true { then() }
        false { else() }
    }
}

when(condition : Bool, then : () => Void) {
    condition ? {
        true { then() }
        false {}
    }
}

while(condition : () => Bool, body : () => Void) {
    js"while(condition()) body();"
}

do[t](body : () => t) : t {
    body()
}

repeat(times : Int, body : () => Void) {
    js"for(var i = 0; i < times; i++) body();"
}

each[a](array : Array[a], body : a => Void) {
    js"for(var i = 0; i < array.length; i++) body(array[i]);"
}

indexed[a](array : Array[a]) : Array[Pair[Int, a]] {
    result := []
    js"for(var i = 0; i < array.length; i++) result.push(Pair.pair(i, array[i]));"
    result
}

zip[a, b](left : Array[a], right : Array[b]) : Array[Pair[a, b]] {
    result := []
    js"for(var i = 0; i < left.length && i < right.length; i++) result.push(Pair.pair(left[i], right[i]));"
    result
}

map[a, b](array : Array[a], body : a => b) : Array[b] {
    result := []
    js"for(var i = 0; i < array.length; i++) result.push(body(array[i]));"
    result
}

filter[a](array : Array[a], condition : a => Bool) : Array[a] {
    result := []
    js"for(var i = 0; i < array.length; i++) if(condition(array[i])) result.push(array[i]);"
    result
}

find[a](array : Array[a], condition : a => Bool) : Option[a] {
    js"for(var i = 0; i < array.length; i++) if(condition(array[i])) return Option.some(array[i]);"
    Option.none
}

first[a](array : Array[a]) : Option[a] {
    if(array.size != 0, {Option.some(array(0))}, {Option.none})
}

firsts[a](array : Array[a]) : Array[a] {
    result := []
    js"for(var i = 0; i < array.length - 1; i++) result.push(array[i]);"
    result
}

last[a](array : Array[a]) : Option[a] {
    if(array.size != 0, {Option.some(array(array.size - 1))}, {Option.none})
}

lasts[a](array : Array[a]) : Array[a] {
    result := []
    js"for(var i = 1; i < array.length; i++) result.push(array[i]);"
    result
}

any[a](array : Array[a], condition : a => Bool) : Bool {
    js"for(var i = 0; i < array.length; i++) if(condition(array[i])) return true;"
    Bool.false
}

all[a](array : Array[a], condition : a => Bool) : Bool {
    js"for(var i = 0; i < array.length; i++) if(!condition(array[i])) return false;"
    Bool.true
}

flatten[a](array : Array[Array[a]]) : Array[a] {
    result := []
    js"for(var i = 0; i < array.length; i++) for(var j = 0; j < array[i].length; j++) result.push(array[i][j]);"
    result
}

join(array : Array[String], separator : String) : String {
    js"return array.join(separator);"
}

panic[a](problem : String) : a {
    js"'debugger';"
    js"throw problem;"
}

orElse[a](options : Array[() => Option[a]]) : Option[a] {
    result := Option.none
    i := 0
    while({result == Option.none && i < options.size}, {
        result = options(i)()
        i += 1
    })
    result
}

orPanic[a](option : Option[a]) : a {
    option ? {
        none { panic("orPanic(Option.none)") }
        some(value) { value }
    }
}

or[a](option : Option[a], default : a) : a {
    option ? {
        none { default }
        some(value) { value }
    }
}

sortByString[a](array : Array[a], selector : a => String) : Array[a] {
    js"return array.slice().sort(function(a, b) { return selector(a).localeCompare(selector(b)); });"
}

sortByInt[a](array : Array[a], selector : a => Int) : Array[a] {
    js"return array.slice().sort(function(a, b) { return selector(a) - selector(b); });"
}

Pair[a, b](first : a, second : b)

