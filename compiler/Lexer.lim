lexToken(cursor : CharCursor) : Option[Token] {
    orElse([
        {lexIdentifier(cursor)},
        {lexOperator(cursor)},
        {lexCodeUnit(cursor)},
        {lexText(cursor)},
        {lexBrackets(cursor)},
        {lexSeparator(cursor)},
        {lexNumber(cursor)}
    ])
}

lexSeparator(cursor : CharCursor) : Option[Token] {
    cursor.skipWhitespace()
    if(cursor(0) != '\n' && cursor(0) != ';', {
        Option.none
    }, {
        from := cursor.offset
        while({cursor(0) == '\n' || cursor(0) == ';'}, {
            cursor.skip(1)
            cursor.skipWhitespace()
        })
        Option.some(Token(TokenType.separator, from, from + 1))
    })
}

lexIdentifier(cursor : CharCursor) : Option[Token] {
    upper := isBetween(cursor(0), 'A', 'Z')
    if(!upper && !isBetween(cursor(0), 'a', 'z'), {
        Option.none
    }, {
        from := cursor.offset
        while({isBetween(cursor(0), 'a', 'z') || isBetween(cursor(0), 'A', 'Z') || isBetween(cursor(0), '0', '9')}, {
            cursor.skip(1)
        })
        to := cursor.offset
        cursor.skipWhitespace()
        Option.some(Token(if(upper, {TokenType.upper}, {TokenType.lower}), from, to))
    })
}

lexOperator(cursor : CharCursor) : Option[Token] {
    from := cursor.offset
    token := (ahead, tokenType) => () => {
        if(cursor.lookAhead(ahead), {
            cursor.skip(ahead.size);
            Option.some(Token(tokenType, from, cursor.offset))
        }, {Option.none})
    }
    firstAcceptedToken := bodies => {
        i := 0
        result := Option.none
        array : Array[() => Option[Token]] = bodies
        while({i < array.size}, {
            result = array(i)()
            when(result != Option.none, { i = array.size })
            i += 1
        })
        result
    }
    result := firstAcceptedToken([
        token(['-', '>'], TokenType.rightThinArrow),
        token(['-', '='], TokenType.decrement),
        token(['-'], TokenType.minus),
        token(['+', '='], TokenType.increment),
        token(['+'], TokenType.plus),
        token(['=', '>'], TokenType.rightThickArrow),
        token(['=', '='], TokenType.equal),
        token(['!', '='], TokenType.notEqual),
        token(['='], TokenType.assign),
        token(['*'], TokenType.star),
        token(['/'], TokenType.slash),
        token(['&', '&'], TokenType.and),
        token(['|', '|'], TokenType.or),
        token(['|', '>'], TokenType.rightPipe),
        token(['<', '|'], TokenType.leftPipe),
        token(['?'], TokenType.question),
        token(['!'], TokenType.exclamation),
        token([':'], TokenType.colon),
        token(['@'], TokenType.atSign),
        token(['.'], TokenType.dot),
        token([','], TokenType.comma),
        token(['_'], TokenType.underscore),
        token(['<', '-'], TokenType.leftThinArrow),
        token(['<', '='], TokenType.lessEqual),
        token(['<'], TokenType.less),
        token(['>', '='], TokenType.greaterEqual),
        token(['>'], TokenType.greater)
    ])
    when(result != Option.none, {cursor.skipWhitespace()})
    result
}

lexBrackets(cursor : CharCursor) : Option[Token] {
    c := cursor(0)
    from := cursor.offset
    result := (
        case({cursor.lookAhead(['('])}, {cursor.skip(1); cursor.push(')'); Option.some(Token(TokenType.leftRound, from, cursor.offset))}).
        case({cursor.lookAhead([')'])}, {cursor.skip(1); cursor.pop(')'); Option.some(Token(TokenType.rightRound, from, cursor.offset))}).
        case({cursor.lookAhead(['['])}, {cursor.skip(1); cursor.push(']'); Option.some(Token(TokenType.leftSquare, from, cursor.offset))}).
        case({cursor.lookAhead([']'])}, {cursor.skip(1); cursor.pop(']'); Option.some(Token(TokenType.rightSquare, from, cursor.offset))}).
        case({cursor.lookAhead(['{'])}, {cursor.skip(1); cursor.push('}'); Option.some(Token(TokenType.leftCurly, from, cursor.offset))}).
        case({cursor.lookAhead(['}'])}, {cursor.skip(1); cursor.pop('}'); Option.some(Token(TokenType.rightCurly, from, cursor.offset))}).
        else({Option.none})
    )
    when(result != Option.none, {cursor.skipWhitespace()})
    result
}

lexCodeUnit(cursor : CharCursor) : Option[Token] {
    from := cursor.offset
    if(cursor(0) != '\'', {Option.none}, {
        cursor.skip(1)
        when(cursor(0) == '\\', {cursor.skip(1)})
        cursor.skip(1)
        when(cursor(0) != '\'', {panic("Expected ', but got: \(codeUnit(cursor(0))) \(positionText(cursor, from))")})
        cursor.skip(1)
        to := cursor.offset
        cursor.skipWhitespace()
        Option.some(Token(TokenType.codeUnit, from, to))
    })
}

lexText(cursor : CharCursor) : Option[Token] {
    f := cursor(0)
    from := cursor.offset
    stop := Bool.false
    middle := if(f == ')' && cursor.top('"'), {
        cursor.pop('"')
        Bool.true
    }, {
        when(f != '"', {stop = Bool.true})
        Bool.false
    })
    if(stop, {Option.none}, {
        cursor.skip(1)
        while({!stop && cursor(0) != '"'}, {
            if(cursor(0) == '\\' && cursor(1) == '(', {
                cursor.skip(1)
                cursor.push('"')
                stop = Bool.true
            }, {
                if(cursor(0) == '\\', {
                    cursor.skip(1)
                    c := cursor(0)
                    if(c == 'n' || c == 'r' || c == 't' || c == '\'' || c == '\"' || c == '\\', {cursor.skip(1)}, {
                        if(c == '{', {
                            cursor.skip(1)
                            while({cursor(0) != '}'}, {
                                when(cursor.pastEnd, {panic("Unexpected end of file inside unicode escape sequence \(positionText(cursor, from))")})
                                h := cursor(0)
                                if((h >= '0' && h <= '9') || (h >= 'a' && c <= 'f') || (h >= 'A' && c <= 'F'), {
                                    cursor.skip(1)
                                }, {
                                    panic("Unexpected non-hexadecimal inside unicode escape sequence: \(codeUnit(h)) \(positionText(cursor, from))")
                                })
                            })
                            cursor.skip(1)
                        }, {
                            panic("Unknown escape sequence: \\\(codeUnit(cursor(0))) \(positionText(cursor, from))")
                        })
                    })
                }, {
                    when(cursor.pastEnd, {panic("Unexpected end of file inside this string \(positionText(cursor, from))")})
                    cursor.skip(1)
                })
            })
        })
        to := cursor.offset
        cursor.skip(1)
        cursor.skipWhitespace()
        tokenType := if(stop, {
            if(middle, {TokenType.textMiddle}, {TokenType.textStart})
        }, {
            if(middle, {TokenType.textEnd}, {TokenType.text})
        })
        Option.some(Token(tokenType, from, to))
    })
}

lexNumber(cursor : CharCursor) : Option[Token] {
    c := cursor(0)
    if(c < '0' || c > '9', {Option.none}, {
        from := cursor.offset
        while({cursor(0) >= '0' && cursor(0) <= '9'}, {
            when(cursor.pastEnd, {panic("Unexpected end of file inside this number \(positionText(cursor, from))")})
            cursor.skip(1)
        })
        to := cursor.offset
        cursor.skipWhitespace()
        Option.some(Token(TokenType.numeral, from, to))
    })
}

lexTokens(buffer : String) : Array[Token] {
    builder := newArrayBuilder()
    cursor := newCharCursor(buffer)
    lastToken : Option[Token] = Option.none
    while({ lastToken = lexToken(cursor); lastToken != Option.none }, {builder.push(orPanic(lastToken))})
    when(!cursor.pastEnd, {
        panic("Unexpected character: \(codeUnit(cursor(0))) \(positionText(cursor, cursor.offset))")
    })
    repeat(5, {builder.push(Token(TokenType.outsideFile, cursor.offset, cursor.offset))})
    builder.drain
}

isBetween(c : Int, from : Int, to : Int) : Bool {
    c >= from && c <= to
}

testLexer() {
    result := lexTokens("while({x > 1}, { y += '\n' })")
    js"for(var i = 0; i < result.length; i++) console.log(result[i].token._);"
}
