checkModule(typer : Typer, module : Module) : Module {
    typer.setModule(module)
    Module(
        package = module.package,
        file = module.file,
        alias = module.alias,
        source = module.source,
        typeDefinitions = module.typeDefinitions,
        functionDefinitions = map(module.functionDefinitions, d => typer.topScope({ checkFunctionDefinitionInScope(typer, d) }))
    )
}

checkFunctionDefinitionInScope(typer : Typer, definition : FunctionDefinition) : FunctionDefinition {
    each(definition.signature.parameters, p => {
        typer.bindVariable(p.name, p.type)
    })
    body := checkBody(typer, definition.signature.returnType, definition.position, definition.body)
    FunctionDefinition(definition.position, definition.signature, body)
}

checkBody(typer : Typer, expectedType : Type, position : Int, body : Array[Statement]) : Array[Statement] {
    if(body.size == 0, {
        equalityConstraint(typer, position, expectedType, Type.constructor(position, "Void@_", []))
        []
    }, {
        typer.scope({
            initial := map(firsts(body), s => checkStatement(typer, Type.variable(position, typer.fresh), s))
            return := orPanic(last(body))
            typedReturn := typer.expand(expectedType) ? {
                constructor(position2, symbol2, typeArguments2) {
                    if(symbol2 == "Void@_", {
                        checkStatement(typer, Type.variable(position, typer.fresh), return)
                    }, {
                        checkStatement(typer, expectedType, return)
                    })
                }
                record(position2, fields2) {
                    checkStatement(typer, expectedType, return)
                }
                parameter(position2, name2) {
                    checkStatement(typer, expectedType, return)
                }
                variable(position2, id2) {
                    checkStatement(typer, expectedType, return)
                }
            }
            initial.concat([typedReturn])
        })
    })
}

checkStatement(typer : Typer, expectedType : Type, statement : Statement) : Statement {
    statement ? {
        term(position, term) {
            term2 := checkTerm(typer, expectedType, term)
            Statement.term(position, term2)
        }
        let(position, variable, type, value) {
            equalityConstraint(typer, position, expectedType, Type.constructor(position, "Void@_", []))
            type2 := or(type, Type.variable(position, typer.fresh))
            value2 := checkTerm(typer, type2, value)
            expandedType := typer.expand(type2)
            typer.bindVariable(variable, expandedType)
            Statement.let(position, variable, Option.some(expandedType), value2)
        }
        functions(definitions) {
            position := orPanic(first(definitions)).position
            each(definitions, d => typer.bindFunction(d.signature.symbol, d))
            typedDefinitions := map(definitions, d => typer.scope({ checkFunctionDefinitionInScope(typer, d) }))
            equalityConstraint(typer, position, expectedType, Type.constructor(position, "Void@_", []))
            Statement.functions(typedDefinitions)
        }
        assign(position, variable, value) {
            equalityConstraint(typer, position, expectedType, Type.constructor(position, "Void@_", []))
            value2 := checkTerm(typer, typer.variable(variable), value)
            Statement.assign(position, variable, value2)
        }
        increment(position, variable, value) {
            equalityConstraint(typer, position, expectedType, Type.constructor(position, "Void@_", []))
            value2 := checkTerm(typer, typer.variable(variable), value)
            Statement.increment(position, variable, value2)
        }
        decrement(position, variable, value) {
            equalityConstraint(typer, position, expectedType, Type.constructor(position, "Void@_", []))
            value2 := checkTerm(typer, typer.variable(variable), value)
            Statement.decrement(position, variable, value2)
        }
        ffi(position, language, code) {
            statement
        }
    }
}

checkArguments(typer : Typer, expectedType : Type, position : Int, signature : MethodSignature, arguments : Arguments) : Arguments {
    instantiation := newStringMap(map(signature.typeParameters, p => Pair(p, Type.variable(position, typer.fresh))))
    parameterTypes := map(signature.parameters, p => typer.instantiate(instantiation, p.type))
    returnType := typer.instantiate(instantiation, signature.returnType)
    unnamed := map(zip(parameterTypes, arguments.unnamed), p => {
        checkTerm(typer, p.first, p.second)
    })
    namedParameters := map(signature.parameters.drop(arguments.unnamed.size()), p => p.name)
    named := map(zip(parameterTypes.drop(arguments.unnamed.size), namedParameters), p => {
        find(arguments.named, a => a.name == p.second) ? {
            some(a) {
                NamedArgument(a.order, p.second, checkTerm(typer, p.first, a.value))
            }
            none {
                typer.error(position, "Missing argument: \(p.second)")
            }
        }
    })
    when(unnamed.size + named.size < parameterTypes.size, { typer.error(position, "Too few arguments") })
    when(unnamed.size + named.size > parameterTypes.size, { typer.error(position, "Too many arguments") })
    equalityConstraint(typer, position, expectedType, returnType)
    Arguments(unnamed, named)
}

checkTerm(typer : Typer, expectedType : Type, term : Term) : Term {
    term ? {
        binary(position, operator, left, right) {
            types := if(
                operator == TokenType.plus ||
                operator == TokenType.minus ||
                operator == TokenType.star ||
                operator == TokenType.slash,
            {
                Pair(Type.constructor(position, "Int@_", []), Type.constructor(position, "Int@_", []))
            }, {
                Pair(Type.variable(position, typer.fresh), Type.constructor(position, "Bool@_", []))
            })
            typedLeft := checkTerm(typer, types.first, left)
            typedRight := checkTerm(typer, types.first, right)
            equalityConstraint(typer, position, expectedType, types.second)
            Term.binary(position, operator, typedLeft, typedRight)
        }
        unary(position, operator, value) {
            types := if(operator == TokenType.minus, {
                Pair(Type.constructor(position, "Int@_", []), Type.constructor(position, "Int@_", []))
            }, {
                Pair(Type.constructor(position, "Bool@_", []), Type.constructor(position, "Bool@_", []))
            })
            typedValue := checkTerm(typer, types.first, value)
            equalityConstraint(typer, position, expectedType, types.second)
            Term.unary(position, operator, typedValue)
        }
        codeUnit(position, value) {
            equalityConstraint(typer, position, expectedType, Type.constructor(position, "Int@_", []))
            term
        }
        text(position, value) {
            equalityConstraint(typer, position, expectedType, Type.constructor(position, "String@_", []))
            term
        }
        textLiteral(position, parts) {
            typedParts := map(parts, p => checkTerm(typer, Type.constructor(position, "String@_", []), p))
            equalityConstraint(typer, position, expectedType, Type.constructor(position, "String@_", []))
            Term.textLiteral(position, typedParts)
        }
        integer(position, value) {
            equalityConstraint(typer, position, expectedType, Type.constructor(position, "Int@_", []))
            term
        }
        floating(position, value) {
            equalityConstraint(typer, position, expectedType, Type.constructor(position, "Float@_", []))
            term
        }
        array(position, elements) {
            elementType := Type.variable(position, typer.fresh)
            typedElements := map(elements, e => checkTerm(typer, elementType, e))
            equalityConstraint(typer, position, expectedType, Type.constructor(position, "Array@_", [elementType]))
            Term.array(position, typedElements)
        }
        record(position, fields) {
            fieldTypes := map(fields, f => Type.variable(position, typer.fresh))
            typedFields := map(zip(fields, fieldTypes), p => {
                typedValue := checkTerm(typer, p.second, p.first.value)
                Pair(Field(p.first.position, p.first.label, typedValue), FieldType(p.first.position, p.first.label, p.second))
            })
            recordType := Type.record(position, sortLexicographicallyBy(map(typedFields, p => p.second), f => f.label))
            equalityConstraint(typer, position, expectedType, recordType)
            Term.record(position, map(typedFields, p => p.first))
        }
        instance(position, symbol, thisName, methods) {
            typeDefinition := typer.type(symbol)
            typeArguments := map(typeDefinition.typeParameters, p => Type.variable(position, typer.fresh))
            instantiation := newStringMap(zip(typeDefinition.typeParameters, typeArguments))
            type := Type.constructor(position, symbol, typeArguments)
            equalityConstraint(typer, position, expectedType, type)
            typedMethods := typer.scope({
                thisName ? { some(name) { typer.bindVariable(name, type) }; none {} }
                map(methods, m => {
                    signature := find(typeDefinition.methodSignatures, s => s.symbol == m.name) ? {
                        none { typer.error(position, "Unknown method: \(m.name)") }
                        some(s) { s }
                    }
                    typer.scope({
                        parameterTypes := map(signature.parameters, p => typer.instantiate(instantiation, p.type))
                        returnType := typer.instantiate(instantiation, signature.returnType)
                        each(zip(m.parameters, parameterTypes), p => {
                            typer.bindVariable(p.first, p.second)
                        })
                        typedBody := checkBody(typer, returnType, m.position, m.body)
                        MethodImplementation(m.position, m.name, m.parameters, typedBody)
                    })
                })
            })
            each(typeDefinition.methodSignatures, s => {
                find(methods, m => s.symbol == m.name) ? {
                    none { typer.error(position, "Missing method: \(s.symbol)") }
                    some(s) {}
                }
            })
            when(methods.size > typeDefinition.methodSignatures.size, { typer.error(position, "Duplicate method") })
            Term.instance(position, symbol, thisName, typedMethods)
        }
        match(position, value, cases) {
            type := Type.variable(position, typer.fresh)
            typedValue := checkTerm(typer, type, value)
            signatures := typer.expand(type) ? {
                variable(position2, id2) {
                    typer.error(position, "Match requires known object type")
                }
                parameter(position2, name2) {
                    typer.error(position, "Can't match on type parameter: \(typeToString(typer.expand(type)))")
                }
                record(position2, fields2) {
                    typer.error(position, "Can't match on record type: \(typeToString(typer.expand(type)))")
                }
                constructor(position2, symbol2, typeArguments2) {
                    typeDefinition := typer.type(symbol2)
                    when(!typeDefinition.isSum, { typer.error(position, "Can't match on non-sum type: \(typeToString(typer.expand(type)))") })
                    signatures := map(typeDefinition.methodSignatures, s => {
                        when(find(cases, c => c.body.name == s.symbol) == Option.none, {
                            typer.error(position, "Missing case: \(s.symbol) on type \(typeToString(typer.expand(type)))")
                        })
                        instantiation := newStringMap(zip(typeDefinition.typeParameters, typeArguments2))
                        parameters := map(s.parameters, p => Parameter(p.position, p.name, typer.instantiate(instantiation, p.type)))
                        returnType := typer.instantiate(instantiation, s.returnType)
                        MethodSignature(s.position, s.symbol, s.typeParameters, parameters, returnType)
                    })
                    each(cases, c => {
                        find(typeDefinition.methodSignatures, s => s.symbol == c.body.name) ? {
                            none { typer.error(position, "Unknown case: \(c.body.name)") }
                            some(s) {}
                        }
                    })
                    when(cases.size > typeDefinition.methodSignatures.size, { typer.error(position, "Duplicate case") })
                    signatures
                }
            }
            typedCases := map(cases, c => {
                find(signatures, s => c.body.name == s.symbol) ? {
                    none { typer.error(position, "No such case: \(c.body.name) in type \(typeToString(typer.expand(type)))") }
                    some(s) {
                        fieldNames := map(s.parameters, p => p.name)
                        implementation := typer.scope({
                            each(zip(s.parameters, c.body.parameters), p => {
                                typer.bindVariable(p.second, p.first.type)
                            })
                            statements := checkBody(typer, expectedType, position, c.body.body)
                            MethodImplementation(c.body.position, c.body.name, c.body.parameters, statements)
                        })
                        MatchCase(implementation, fieldNames)
                    }
                }
            })
            Term.match(position, typedValue, typedCases)
        }
        lambda(position, parameters, body) {
            parameterTypes := map(parameters, p => Type.variable(position, typer.fresh))
            returnType := Type.variable(position, typer.fresh)
            functionType := Type.constructor(position, "F\(parameters.size.toString)@_", parameterTypes.concat([returnType]))
            equalityConstraint(typer, position, expectedType, functionType)
            typedBody := typer.scope({
                each(zip(parameters, parameterTypes), p => {
                    typer.bindVariable(p.first, p.second)
                })
                checkBody(typer, returnType, position, body)
            })
            Term.lambda(position, parameters, typedBody)
        }
        functionCall(position, methodName, arguments) {
            signature := typer.function(methodName) ? {
                some(f) { f.signature }
                none { typer.error(position, "No such method: \(methodName)") }
            }
            typedArguments := checkArguments(typer, expectedType, position, signature, arguments)
            Term.functionCall(position, methodName, typedArguments)
        }
        staticCall(position, symbol, methodName, arguments) {
            signature := typer.function("\(symbol).\(methodName)") ? {
                some(f) { f.signature }
                none {
                    typeDefinition := typer.type(symbol)
                    when(!typeDefinition.isSum, { typer.error(position, "No such method: \(symbol).\(methodName)") })
                    find(typeDefinition.methodSignatures, s => s.symbol == methodName) ? {
                        none { typer.error(position, "No such method: \(symbol).\(methodName)") }
                        some(s) {
                            typeArguments := map(typeDefinition.typeParameters, p => Type.variable(position, typer.fresh))
                            instantiation := newStringMap(zip(typeDefinition.typeParameters, typeArguments))
                            parameters := map(s.parameters, p => Parameter(p.position, p.name, typer.instantiate(instantiation, p.type)))
                            returnType := Type.constructor(position, symbol, typeArguments)
                            MethodSignature(s.position, s.symbol, s.typeParameters, parameters, returnType)
                        }
                    }
                }
            }
            typedArguments := checkArguments(typer, expectedType, position, signature, arguments)
            Term.staticCall(position, symbol, methodName, typedArguments)
        }
        methodCall(position, value, methodName, arguments) {
            type := Type.variable(position, typer.fresh)
            typedValue := checkTerm(typer, type, value)
            signature := typer.expand(type) ? {
                variable(position2, id2) {
                    typer.error(position, "Method call requires known object type: \(methodName)")
                }
                parameter(position2, name2) {
                    typer.error(position, "No such method: \(methodName) on type parameter \(name2)")
                }
                record(position2, fields2) {
                    field := find(fields2, f => f.label == methodName) ? {
                        none {
                            typer.error(position, "No such field: \(methodName) in record \(typeToString(type))")
                        }
                        some(f) { f }
                    }
                    MethodSignature(position2, field.label, [], [], field.type)
                }
                constructor(position2, symbol2, typeArguments2) {
                    typeDefinition := typer.type(symbol2)
                    if(typeDefinition.isSum, {
                        when(typeDefinition.methodSignatures.size != 1, { typer.error(position, "No such method: \(methodName) on sum type \(symbol2)") })
                        s := typeDefinition.methodSignatures.invoke(0)
                        instantiation := newStringMap(zip(typeDefinition.typeParameters, typeArguments2))
                        parameters := map(s.parameters, p => Parameter(p.position, p.name, typer.instantiate(instantiation, p.type)))
                        field := find(parameters, p => p.name == methodName) ? {
                            none {
                                typer.error(position, "No such field: \(methodName) on object of type \(symbol2)")
                            }
                            some(f) { f }
                        }
                        MethodSignature(s.position, field.name, [], [], field.type)
                    }, {
                        find(typeDefinition.methodSignatures, s => s.symbol == methodName) ? {
                            none { typer.error(position, "No such method: \(methodName) on object of type \(symbol2)") }
                            some(s) {
                                instantiation := newStringMap(zip(typeDefinition.typeParameters, typeArguments2))
                                parameters := map(s.parameters, p => Parameter(p.position, p.name, typer.instantiate(instantiation, p.type)))
                                returnType := typer.instantiate(instantiation, s.returnType)
                                MethodSignature(s.position, s.symbol, s.typeParameters, parameters, returnType)
                            }
                        }
                    })
                }
            }
            typedArguments := checkArguments(typer, expectedType, position, signature, arguments)
            Term.methodCall(position, typedValue, methodName, typedArguments)
        }
        variable(position, symbol) {
            type := typer.variable(symbol)
            equalityConstraint(typer, position, expectedType, type)
            term
        }
        ffiJs(position, code) {
            term
        }
    }
}
