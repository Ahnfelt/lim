emitModule(builder : StringBuilder, module : Module) {
    each(module.typeDefinitions, d => {
        emitTypeDefinition(builder, d)
        builder.append("\n")
    })
    each(module.functionDefinitions, d => {
        emitFunctionDefinition(builder, d)
        builder.append("\n")
    })
}

emitTypeDefinition(builder : StringBuilder, definition : TypeDefinition) {
    when(definition.isSum, {
        name := baseName(definition.symbol)
        builder.append("var \(escapeUpper(name)) = {\n")
        first := Bool.true
        each(definition.methodSignatures, s => {
            when(!first, { builder.append(",\n") })
            first = Bool.false
            when(s.parameters.size == 0, {
                builder.append("\(escapeMethod(s.symbol))_k: {_: \(escapeString(s.symbol))},\n")
            })
            builder.append("\(escapeMethod(s.symbol)): function(")
            builder.append(join(map(s.parameters, p => escapeVariable(p.name)), ", "))
            builder.append(") {\n")
            if(s.parameters.size == 0, {
                builder.append("return \(escapeUpper(name)).\(escapeMethod(s.symbol))_k;\n")
            }, {
                builder.append("return {_: \(escapeString(s.symbol))")
                builder.append(join(map(s.parameters, p => ", \(escapeMethod(p.name)): \(escapeVariable(p.name))"), ""))
                builder.append("};\n")
            })
            builder.append("}")
        })
        builder.append("\n};\n")
    })
}

emitFunctionDefinition(builder : StringBuilder, definition : FunctionDefinition) {
    name := baseName(definition.signature.symbol)
    parameters := join(map(definition.signature.parameters, p => escapeVariable(p.name)), ", ")
    builder.append("function \(escapeMethod(name))(\(parameters)) {\n")
    emitBody(builder, definition.body)
    builder.append("}\n")
}

emitBody(builder : StringBuilder, body : Array[Statement]) {
    firsts := body.take(body.size - 1)
    lasts := body.drop(body.size - 1)
    each(firsts, s => emitStatement(builder, s, Bool.false))
    each(lasts, s => emitStatement(builder, s, Bool.true))
}

emitStatement(builder : StringBuilder, statement : Statement, return : Bool) {
    statement ? {
        term(position, term) {
            when(return, { builder.append("return ") })
            emitTerm(builder, term)
            builder.append(";\n")
        }
        let(position, variable, type, value) {
            builder.append("var \(escapeVariable(variable)) = ")
            emitTerm(builder, value)
            builder.append(";\n")
        }
        functions(definitions) {
            each(definitions, d => emitFunctionDefinition(builder, d))
        }
        assign(position, variable, value) {
            builder.append("\(escapeVariable(variable)) = ")
            emitTerm(builder, value)
            builder.append(";\n")
        }
        increment(position, variable, value) {
            builder.append("\(escapeVariable(variable)) += ")
            emitTerm(builder, value)
            builder.append(";\n")
        }
        decrement(position, variable, value) {
            builder.append("\(escapeVariable(variable)) -= ")
            emitTerm(builder, value)
            builder.append(";\n")
        }
        ffi(position, language, code) {
            builder.append(code)
            builder.append("\n")
        }
    }
}

emitArguments(builder : StringBuilder, arguments : Arguments) {
    first := Bool.true
    each(arguments.unnamed, a => {
        when(!first, { builder.append(", ") })
        first = Bool.false
        emitTerm(builder, a)
    })
    js"/* TODO: Respect original evaluation order */"
    named := sortByInt(arguments.named, a => a.order)
    each(named, a => {
        when(!first, { builder.append(", ") })
        first = Bool.false
        emitTerm(builder, a.value)
    })
}

emitTerm(builder : StringBuilder, term : Term) {
    term ? {
        binary(position, operator, left, right) {
            builder.append("(")
            emitTerm(builder, left)
            builder.append(" ")
            done := Bool.false
            when(operator == TokenType.star, { builder.append("*"); done = Bool.true })
            when(operator == TokenType.slash, { builder.append("/"); done = Bool.true })
            when(operator == TokenType.plus, { builder.append("+"); done = Bool.true })
            when(operator == TokenType.minus, { builder.append("-"); done = Bool.true })
            when(operator == TokenType.equal, { builder.append("=="); done = Bool.true })
            when(operator == TokenType.notEqual, { builder.append("!="); done = Bool.true })
            when(operator == TokenType.less, { builder.append("<"); done = Bool.true })
            when(operator == TokenType.lessEqual, { builder.append("<="); done = Bool.true })
            when(operator == TokenType.greater, { builder.append(">"); done = Bool.true })
            when(operator == TokenType.greaterEqual, { builder.append(">="); done = Bool.true })
            when(operator == TokenType.and, { builder.append("&&"); done = Bool.true })
            when(operator == TokenType.or, { builder.append("||"); done = Bool.true })
            when(!done, { panic("Unknown binary operator") })
            builder.append(" ")
            emitTerm(builder, right)
            builder.append(")")
        }
        unary(position, operator, value) {
            done := Bool.false
            when(operator == TokenType.minus, { builder.append("-"); done = Bool.true })
            when(operator == TokenType.exclamation, { builder.append("!"); done = Bool.true })
            when(!done, { panic("Unknown unary operator") })
            emitTerm(builder, value)
        }
        codeUnit(position, value) {
            builder.append(value.toString)
        }
        text(position, value) {
            builder.append(escapeString(value))
        }
        textLiteral(position, parts) {
            first := Bool.true
            when(parts.size > 1, { builder.append("(") })
            each(parts, p => {
                when(!first, { builder.append(" + ") })
                first = Bool.false
                emitTerm(builder, p)
            })
            when(parts.size > 1, { builder.append(")") })
        }
        integer(position, value) {
            builder.append(value)
        }
        floating(position, value) {
            builder.append(value)
        }
        array(position, elements) {
            first := Bool.true
            builder.append("[")
            each(elements, e => {
                when(!first, { builder.append(", ") })
                first = Bool.false
                emitTerm(builder, e)
            })
            builder.append("]")
        }
        record(position, original, labels, fields) {
            originalLabels := filter(labels, l => find(fields, f => f.label == l) == Option.none)
            original ? {
                none {
                    first := Bool.true
                    builder.append("{")
                    each(fields, f => {
                        when(!first, { builder.append(", ") })
                        first = Bool.false
                        builder.append(escapeMethod(f.label) + ": ")
                        emitTerm(builder, f.value)
                    })
                    builder.append("}")
                }
                some(o) {
                    first := Bool.true
                    builder.append("(function(_o) { return {")
                    each(originalLabels, l => {
                        when(!first, { builder.append(", ") })
                        first = Bool.false
                        builder.append(escapeMethod(l) + ": _o." + escapeMethod(l))
                    })
                    each(fields, f => {
                        when(!first, { builder.append(", ") })
                        first = Bool.false
                        builder.append(escapeMethod(f.label) + ": ")
                        emitTerm(builder, f.value)
                    })
                    builder.append("}})(")
                    emitTerm(builder, o)
                    builder.append(")")
                }
            }
        }
        instance(position, symbol, thisName, methods) {
            when(symbol == "F0@_" || symbol == "F1@_" || symbol == "F2@_" || symbol == "F3@_", { panic("Can't create explicit instance of lambda function F*@_") })
            builder.append("{\n")
            each(indexed(methods), m => {
                builder.append(escapeMethod(m.second.name))
                builder.append(": ")
                builder.append("function(")
                builder.append(join(m.second.parameters, ", "))
                builder.append(") {\n")
                thisName ? { some(x) { builder.append("var \(escapeVariable(x)) = this;\n") }; none {} }
                emitBody(builder, m.second.body)
                builder.append("}")
                when(m.first < methods.size - 1, { builder.append(",") })
                builder.append("\n")
            })
            builder.append("}")
        }
        match(position, value, cases, hintSymbol) {
            if(hintSymbol == "Bool@_", {
                builder.append("(")
                emitTerm(builder, value)
                builder.append(" ? (function() {\n")
                emitBody(builder, orPanic(find(cases, c => c.body.name == "true")).body.body)
                builder.append("})() : (function() {\n")
                emitBody(builder, orPanic(find(cases, c => c.body.name == "false")).body.body)
                builder.append("})())")
            }, {
                builder.append("(function(_match) { switch(_match._) {\n")
                each(cases, c => {
                    builder.append("case \(escapeString(c.body.name)): return (function(){\n")
                    each(indexed(c.body.parameters), p => {
                        builder.append("var \(escapeVariable(p.second)) = _match.\(escapeMethod(c.fieldNames()(p.first)));\n")
                    })
                    emitBody(builder, c.body.body)
                    builder.append("})();\n")
                })
                builder.append("}})(")
                emitTerm(builder, value)
                builder.append(")")
            })
        }
        lambda(position, parameters, body) {
            ps := join(map(parameters, p => escapeVariable(p)), ", ")
            builder.append("(function(\(ps)) {\n")
            emitBody(builder, body)
            builder.append("})")
        }
        functionCall(position, methodName, arguments) {
            name := baseName(methodName)
            builder.append(escapeMethod(name))
            builder.append("(")
            emitArguments(builder, arguments)
            builder.append(")")
        }
        staticCall(position, symbol, methodName, arguments) {
            if(symbol == "Bool@_", {
                builder.append(methodName)
            }, {
                name := baseName(symbol)
                builder.append("\(escapeUpper(name)).\(escapeMethod(methodName))")
                builder.append("(")
                emitArguments(builder, arguments)
                builder.append(")")
            })
        }
        methodCall(position, value, methodName, arguments, hintSymbol) {
            if(hintSymbol == "_field", {
                emitTerm(builder, value)
                builder.append(".\(escapeMethod(methodName))")
            }, {
                specialMethods().get("\(hintSymbol).\(methodName)") ? {
                    some(f) {
                        f(value, builder, arguments)
                    }
                    none {
                        emitTerm(builder, value)
                        builder.append(".\(escapeMethod(methodName))")
                        builder.append("(")
                        emitArguments(builder, arguments)
                        builder.append(")")
                    }
                }
            })
        }
        variable(position, symbol) {
            name := baseName(symbol)
            builder.append(escapeVariable(name))
        }
    }
}

specialMethods() : StringMap[(Term, StringBuilder, Arguments) => Void] {
    newStringMap([
        Pair("Array@_.invoke", (value, builder, arguments) => {
            emitTerm(builder, value)
            builder.append("[")
            emitArguments(builder, arguments)
            builder.append("]")
        }),
        Pair("Array@_.size", (value, builder, arguments) => {
            emitTerm(builder, value)
            builder.append(".length")
        }),
        Pair("Array@_.take", (value, builder, arguments) => {
            emitTerm(builder, value)
            builder.append(".slice(0, ")
            emitArguments(builder, arguments)
            builder.append(")")
        }),
        Pair("Array@_.drop", (value, builder, arguments) => {
            emitTerm(builder, value)
            builder.append(".slice(")
            emitArguments(builder, arguments)
            builder.append(")")
        }),
        Pair("String@_.invoke", (value, builder, arguments) => {
            emitTerm(builder, value)
            builder.append(".charCodeAt(")
            emitArguments(builder, arguments)
            builder.append(")")
        }),
        Pair("String@_.size", (value, builder, arguments) => {
            emitTerm(builder, value)
            builder.append(".length")
        }),
        Pair("String@_.take", (value, builder, arguments) => {
            emitTerm(builder, value)
            builder.append(".substr(0, ")
            emitArguments(builder, arguments)
            builder.append(")")
        }),
        Pair("String@_.drop", (value, builder, arguments) => {
            emitTerm(builder, value)
            builder.append(".substr(")
            emitArguments(builder, arguments)
            builder.append(")")
        }),
        Pair("String@_.toUpper", (value, builder, arguments) => {
            emitTerm(builder, value)
            builder.append(".toUpperCase()")
        }),
        Pair("String@_.toLower", (value, builder, arguments) => {
            emitTerm(builder, value)
            builder.append(".toLowerCase()")
        }),
        Pair("String@_.contains", (value, builder, arguments) => {
            builder.append("(")
            emitTerm(builder, value)
            builder.append(".indexOf(")
            emitArguments(builder, arguments)
            builder.append(") != -1)")
        }),
        Pair("F0@_.invoke", (value, builder, arguments) => {
            emitTerm(builder, value)
            builder.append("()")
        }),
        Pair("F1@_.invoke", (value, builder, arguments) => {
            emitTerm(builder, value)
            builder.append("(")
            emitArguments(builder, arguments)
            builder.append(")")
        }),
        Pair("F2@_.invoke", (value, builder, arguments) => {
            emitTerm(builder, value)
            builder.append("(")
            emitArguments(builder, arguments)
            builder.append(")")
        }),
        Pair("F3@_.invoke", (value, builder, arguments) => {
            emitTerm(builder, value)
            builder.append("(")
            emitArguments(builder, arguments)
            builder.append(")")
        }),
        Pair("Bool@_.toString", (value, builder, arguments) => {
            builder.append("('' + ")
            emitTerm(builder, value)
            builder.append(")")
        }),
        Pair("Int@_.toString", (value, builder, arguments) => {
            builder.append("('' + ")
            emitTerm(builder, value)
            builder.append(")")
        }),
        Pair("Int@_.remainder", (value, builder, arguments) => {
            builder.append("(")
            emitTerm(builder, value)
            builder.append(" % ")
            emitArguments(builder, arguments)
            builder.append(")")
        }),
        Pair("Float@_.toString", (value, builder, arguments) => {
            builder.append("('' + ")
            emitTerm(builder, value)
            builder.append(")")
        }),
        Pair("Float@_.round", (value, builder, arguments) => {
            builder.append("Math.round(")
            emitTerm(builder, value)
            builder.append(")")
        }),
        Pair("Float@_.floor", (value, builder, arguments) => {
            builder.append("Math.floor(")
            emitTerm(builder, value)
            builder.append(")")
        }),
        Pair("Float@_.ceil", (value, builder, arguments) => {
            builder.append("Math.ceil(")
            emitTerm(builder, value)
            builder.append(")")
        }),
        Pair("Promise@_.map", (value, builder, arguments) => {
            js"/* TODO: Promise.resolve special cases on things with a .then method, so this is wrong when body returns a promise. */"
            emitTerm(builder, value)
            builder.append(".then(")
            emitArguments(builder, arguments)
            builder.append(")")
        }),
        Pair("Promise@_.flatMap", (value, builder, arguments) => {
            emitTerm(builder, value)
            builder.append(".then(")
            emitArguments(builder, arguments)
            builder.append(")")
        }),
        Pair("Promise@_.catchMap", (value, builder, arguments) => {
            emitTerm(builder, value)
            builder.append(".catch(")
            emitArguments(builder, arguments)
            builder.append(")")
        }),
        Pair("Promise@_.catchFlatMap", (value, builder, arguments) => {
            emitTerm(builder, value)
            builder.append(".catch(")
            emitArguments(builder, arguments)
            builder.append(")")
        }),
        Pair("Promise@_.thenMap", (value, builder, arguments) => {
            emitTerm(builder, value)
            builder.append(".then(")
            emitArguments(builder, arguments)
            builder.append(")")
        }),
        Pair("Promise@_.thenFlatMap", (value, builder, arguments) => {
            emitTerm(builder, value)
            builder.append(".then(")
            emitArguments(builder, arguments)
            builder.append(")")
        }),
    ])
}

escapeVariable(name : String) : String {
    if(reservedWords().has(name), { "\(name)_" }, { name })
}

escapeMethod(name : String) : String {
    if(reservedWords().has(name), { "\(name)_" }, { name })
}

escapeUpper(name : String) : String {
    name
}

escapeString(value : String) : String {
    "\"\(value)\""
}

reservedWords() : StringMap[Bool] {
    newStringMap(map([
        "arguments",
        "break",
        "case",
        "catch",
        "class",
        "const",
        "continue",
        "debugger",
        "default",
        "delete",
        "do",
        "else",
        "export",
        "extends",
        "finally",
        "for",
        "function",
        "if",
        "import",
        "in",
        "instanceof",
        "new",
        "return",
        "super",
        "switch",
        "this",
        "throw",
        "try",
        "typeof",
        "var",
        "void",
        "while",
        "with",
        "yield",
        "enum",
        "implements",
        "interface",
        "let",
        "package",
        "private",
        "protected",
        "public",
        "static",
        "await"
    ], w => Pair(w, Bool.true)))
}

baseName(name : String) : String {
    js"return name.replace(/[@].*/, '');"
}
