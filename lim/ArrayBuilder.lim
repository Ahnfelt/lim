ArrayBuilder[t] {
    drain() : Array[t]
    push(element : t)
    pushAll(elements : Array[t])
    pop() : t
    top() : Option[t]
    each(body : t => Void)
    map[a](body : t => a) : ArrayBuilder[a]
    filter(body : t => Bool) : ArrayBuilder[t]
    invoke(index : Int) : t
    size : Int
}

newArrayBuilder[t]() : ArrayBuilder[t] {
    array := []
    ArrayBuilder { this =>
        drain() {
            result := array
            array = []
            result
        }
        push(element) {
            js"array.push(element);"
        }
        pushAll(elements) {
            each(elements, e => this.push(e))
        }
        pop() {
            js"return array.pop()"
        }
        top() {
            result := Option.none
            when(array.size > 0, {js"result = Option.some(array[array.length - 1])"})
            result
        }
        each(body) {
            js"for(var i = 0; i < array.length; i++) body(array[i]);"
        }
        map(body) {
            result := newArrayBuilder()
            js"for(var i = 0; i < array.length; i++) result.push(body(array[i]));"
            result
        }
        filter(body) {
            result := newArrayBuilder()
            js"for(var i = 0; i < array.length; i++) if(body(array[i])) result.push(array[i]);"
            result
        }
        invoke(index) {
            array(index)
        }
        size() {
            array.size()
        }
    }
}
