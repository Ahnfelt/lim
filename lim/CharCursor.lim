Position(line : Int, column : Int, buffer : String, offset : Int)

CharCursor {
    offset : Int
    buffer : String
    invoke(ahead : Int) : Int
    skip(ahead : Int)
    pastEnd : Bool
    lookAhead(ahead : Array[Int]) : Bool
    top(closeSymbol : Int) : Bool
    push(closeSymbol : Int)
    pop(closeSymbol : Int)
    skipWhitespace()
    position(offset : Int) : Position
}

newCharCursor(buffer : String) : CharCursor {
    stack := newArrayBuilder()
    offset := 0

    CharCursor { this =>

        offset { offset }
        buffer { buffer }

        invoke(ahead) {
            i := offset + ahead
            if(i < 0 || i >= buffer.size, {0}, {buffer(i)})
        }

        skip(ahead) {
            offset += ahead
        }

        pastEnd {
            offset >= buffer.size
        }

        lookAhead(ahead) {
            result := Bool.true
            i := 0
            while({i < ahead.size}, {
                when(ahead(i) != this(i), {result = Bool.false})
                i += 1
            })
            result
        }

        top(closeSymbol) {
            stack.size != 0 && stack(stack.size - 1) == closeSymbol
        }

        push(closeSymbol) {
            stack.push(closeSymbol)
        }

        pop(closeSymbol) {
            when(stack.size == 0, {
                panic("Unexpected '\(codeUnit(closeSymbol))' \(positionText(this, offset))")
            })
            when(stack(stack.size - 1) != closeSymbol, {
                panic("Expected '\(codeUnit(stack(stack.size - 1)))', got '\(codeUnit(closeSymbol))' \(positionText(this, offset))")
            })
            stack.pop()
        }

        skipWhitespace() {
            ignoreNewLine := stack.size > 0 && (stack(stack.size - 1) == ')' || stack(stack.size - 1) == ']' || stack(stack.size - 1) == '"')
            while({offset < buffer.size && (this(0) == ' ' || this(0) == '\t' || this(0) == '\r' || (ignoreNewLine && this(0) == '\n'))}, {
                this.skip(1)
            })
        }

        position(offset) {
            at := 0
            line := 1
            column := 1
            while({at < offset}, {
                if(at < buffer.size && buffer(at) == '\n', {
                    line += 1
                    column = 1
                }, {
                    column += 1
                })
                at += 1
            })
            Position(line = line, column = column, buffer = buffer, offset = offset)
        }
    }
}

codeUnit(c : Int) : String {
    js"return String.fromCharCode(c);"
}

positionText(cursor : CharCursor, offset : Int) : String {
    position := cursor.position(offset)
    "at line \(position.line.toString) column \(position.column.toString)"
}
