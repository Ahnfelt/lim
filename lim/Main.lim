compile(fs : FileSystem, moduleSources : Array[[filename : String, text : String]]) : Promise[Void] {

    parsedModules := map(moduleSources, p => {
        moduleName := p.filename
        js"console.log('Parsing ' + moduleName);"
        tokens := lexTokens(p.text)
        pc := newPc(newTokenCursor(tokens, 0), p.text)
        [filename = p.filename, module = parseModule(pc, "_current", "_Current", p.filename, p.text)]
    })

    resolver := newResolver(map(parsedModules, p => p.module))
    resolvedModules := map(parsedModules, p => {
        js"console.log('Resolving ' + p.filename);"
        [filename = p.filename, module = resolveModule(resolver, p.module)]
    })

    typer := newTyper(map(resolvedModules, p => p.module))
    typedModules := map(resolvedModules, p => {
        js"console.log('Typing ' + p.filename);"
        [filename = p.filename, module = checkModule(typer, p.module)]
    })

    builder := newStringBuilder()
    js"console.log('Emitting built-in types');"

    emitModule(builder, Module(
        package = "_prelude",
        file = "_prelude",
        alias = "_prelude",
        source = "",
        typeDefinitions = map(preludeTypeDefinitions(), p => p.second),
        functionDefinitions = []
    ))

    each(typedModules, p => {
        js"console.log('Emitting ' + p.filename);"
        emitModule(builder, p.module)
    })

    emitted := builder.drain

    writeTextFile(fs, "compiler.js", "\(emitted)\n\nmain();\n").map(v => {
        js"console.log('Wrote compiler.js')"
    })
}

loadAndCompile() {

    fs := newFileSystem()

    readDirectory(fs, "lim").flatMap(files => {

        promiseAll(map(files, file => {
            filename := "lim/" + file
            readTextFile(fs, filename).map(text => [filename = file, text = text])
        }))

    }).flatMap(files => {

        sortedFiles := sortByString(files, p => p.filename)
        compile(fs, sortedFiles)

    }).catchMap(error => {

        js"console.log(error);"

    })
}

main() {
    js"process.on('unhandledRejection', function (err, p) { console.error('Unhandled promise rejection: ' + err) })"
    loadAndCompile()
}
